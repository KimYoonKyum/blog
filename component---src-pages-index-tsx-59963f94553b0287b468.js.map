{"version":3,"file":"component---src-pages-index-tsx-59963f94553b0287b468.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/components/Main/Introduction.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    [key: string]: number\r\n  }\r\n}\r\ntype CategoryItemProps = {\r\n  active: boolean\r\n}\r\n\r\ntype GatsbyLinkProps = {\r\n  children: ReactNode\r\n  className?: string\r\n  to: string\r\n} & CategoryItemProps\r\n\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 768px;\r\n  margin: 100px auto 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-top: 50px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\r\n  <Link {...props} />\r\n))<CategoryItemProps>`\r\n  margin-right: 20px;\r\n  padding: 5px 0;\r\n  font-size: 18px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  selectedCategory,\r\n  categoryList,\r\n}) {\r\n  return (\r\n    <CategoryListWrapper>\r\n      {Object.entries(categoryList).map(([name, count]) => (\r\n        <CategoryItem\r\n          to={`?category=${name}`}\r\n          active={name === selectedCategory}\r\n          key={name}\r\n        >\r\n          #{name}({count})\r\n        </CategoryItem>\r\n      ))}\r\n    </CategoryListWrapper>\r\n  )\r\n}\r\nexport default CategoryList\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\n\r\ntype ProfileImageProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n\r\nconst ProfileImageWrapper = styled(GatsbyImage)`\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-bottom: 30px;\r\n  border-radius: 50%;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n`\r\n\r\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\r\n}\r\n\r\nexport default ProfileImage\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport ProfileImage from 'components/Main/ProfileImage'\r\n\r\ntype IntroductionProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n\r\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return (\r\n    <Background>\r\n      <Wrapper>\r\n        <ProfileImage profileImage={profileImage} />\r\n\r\n        <div>\r\n          <SubTitle>안녕하세요.</SubTitle>\r\n          <Title>김윤겸입니다.</Title>\r\n        </div>\r\n      </Wrapper>\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default Introduction\r\n\r\nconst Background = styled.div`\r\n  width: 100%;\r\n  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);\r\n  color: #ffffff;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  width: 768px;\r\n  height: 400px;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    height: 300px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst SubTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 400;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  margin-top: 5px;\r\n  font-size: 35px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 25px;\r\n  }\r\n`\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\nconst PostItemWrapper = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\r\n  transition: 0.3s box-shadow;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  }\r\n`\r\n\r\nconst ThumbnailImage = styled(GatsbyImage)`\r\n  width: 100%;\r\n  height: 200px;\r\n  border-radius: 10px 10px 0 0;\r\n`\r\n\r\nconst PostItemContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 15px;\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-bottom: 3px;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Date = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  opacity: 0.7;\r\n`\r\n\r\nconst Category = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n  margin: 10px -5px;\r\n`\r\n\r\nconst CategoryItem = styled.div`\r\n  margin: 2.5px 5px;\r\n  padding: 3px 5px;\r\n  border-radius: 3px;\r\n  background: black;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: white;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 16px;\r\n  opacity: 0.8;\r\n`\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) {\r\n  return (\r\n    <PostItemWrapper to={link}>\r\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n\r\n      <PostItemContent>\r\n        <Title>{title}</Title>\r\n        <Date>{date}</Date>\r\n        <Category>\r\n          {categories.map(item => (\r\n            <CategoryItem key={item}>{item}</CategoryItem>\r\n          ))}\r\n        </Category>\r\n        <Summary>{summary}</Summary>\r\n      </PostItemContent>\r\n    </PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import { MutableRefObject, useState, useRef, useMemo, useEffect } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null)\n  const [count, setCount] = useState<number>(1)\n\n  const postListByCategory = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }: PostListItemType) =>\n          selectedCategory !== 'All'\n            ? categories.includes(selectedCategory)\n            : true,\n      ),\n    [selectedCategory],\n  )\n\n  useEffect(() => {\n    const observer: IntersectionObserver = new IntersectionObserver(\n      (entries, observer) => {\n        if (!entries[0].isIntersecting) return\n\n        setCount(value => value + 1)\n        observer.disconnect()\n      },\n    )\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0\n    )\n      return\n\n    observer.observe(\n      containerRef.current.children[containerRef.current.children.length - 1],\n    )\n  }, [count, selectedCategory])\n\n  useEffect(() => setCount(1), [selectedCategory])\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  }\n}\n\nexport default useInfiniteScroll\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll, {\r\n  useInfiniteScrollType,\r\n} from 'hooks/useInfiniteScroll'\r\n\r\nexport type PostType = {\r\n  node: {\r\n    id: string\r\n    frontmatter: {\r\n      title: string\r\n      summary: string\r\n      date: string\r\n      categories: string[]\r\n      thumbnail: {\r\n        publicURL: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst PostListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap: 20px;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 50px 0 100px;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    padding: 50px 20px;\r\n  }\r\n`\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  posts,\r\n  selectedCategory,\r\n}) {\r\n  // const postListData = useMemo(\r\n  //   () =>\r\n  //     posts.filter(\r\n  //       ({\r\n  //         node: {\r\n  //           frontmatter: { categories },\r\n  //         },\r\n  //       }: PostListItemType) =>\r\n  //         selectedCategory !== 'All'\r\n  //           ? categories.includes(selectedCategory)\r\n  //           : true,\r\n  //     ),\r\n  //   [selectedCategory],\r\n  // )\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n  )\r\n  return (\r\n    <PostListWrapper ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import React, { FunctionComponent, useMemo } from 'react'\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\nimport Introduction from 'components/Main/Introduction'\nimport PostList from 'components/Main/PostList'\nimport { graphql } from 'gatsby'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { PostListItemType } from 'types/PostItem.types'\n// import * as queryString from 'querystring'\nimport Template from 'components/common/Template'\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      publicURL: string\n    }\n  }\n}\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n  // const parsed: { [key: string]: any } = queryString.parse(\n  //   search.replace('?', ''),\n  // )\n  const parsed: { [key: string]: any } = { category: 'All' }\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostListItemType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n\n          list['All']++\n\n          return list\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\n"],"names":["CategoryListWrapper","CategoryItem","active","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","___EmotionJSX","Link","selectedCategory","categoryList","entries","map","name","count","to","ProfileImageWrapper","GatsbyImage","process","profileImage","image","alt","Background","Wrapper","ProfileImage","SubTitle","Title","PostItemWrapper","ThumbnailImage","PostItemContent","Date","Category","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","item","posts","containerRef","useRef","useState","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","observer","IntersectionObserver","isIntersecting","value","disconnect","current","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","PostItem","location","search","data","site","siteMetadata","description","siteUrl","edges","allMarkdownRemark","file","publicURL","parsed","reduce","list","forEach","category","undefined","All","Template","url","Introduction","CategoryList","PostList"],"sourceRoot":""}